datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Users {
  id Int @default(autoincrement()) @id
  firstName String
  lastName String
  email String @unique
  password String
  userType UserType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project Projects[]
  bid Bids[]
  Proposal Proposals[]
  message Messages[]
  chatsAsClient Chat[] @relation("ClientsChat")
  chatsAsFreelancer Chat[] @relation("FreelancerChat")
  freelancerContracts  Contracts[] @relation("Freelancer")
  clientContracts Contracts[] @relation("Client")
  @@index([email])
}

model Projects {
  id Int @default(autoincrement()) @id
  title String @db.VarChar(250)
  description String
  category    String // Backend Development | Frontend
  skills      Json  // ["NestJS", "TypeScript", "PostgreSQL", "Stripe"],
  budget Decimal @db.Decimal(10, 2)
  deadline DateTime?
  status ProjectStatus @default(open)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  user Users @relation(fields: [clientId], references: [id])
  clientId Int 
  proposal Proposals[]
  bid Bids[]
  contracts Contracts?
  @@index([status])
}

model Bids {
  id Int @default(autoincrement()) @id
  project Projects @relation(fields: [projectId], references: [id])
  freelancer Users @relation(fields: [freelancerId], references: [id]) 
  proposal Proposals?
  projectId Int
  freelancerId Int
  amount Decimal @db.Decimal(10, 2)
  estimatedWork String @db.VarChar(100)
  coverLetter String
  aiAsuggestions String?
  experience String
  cv String
  status BidStatus @default(pending)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([freelancerId, projectId])
}


model Proposals {
  id Int @default(autoincrement()) @id
  user Users @relation(fields: [freelancerId], references: [id])
  freelancerId Int
  project Projects @relation(fields: [projectId], references: [id])
  projectId Int
  bid Bids @relation(fields: [bidId], references: [id])
  bidId Int
  status ProposalStatus @default(pending)
  proposalUrl String
  additionalDerails String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([bidId])
} 


model Contracts {
  id Int @default(autoincrement()) @id
  project Projects @relation(fields: [projectId], references: [id])
  projectId Int @unique

  freelancer Users @relation("Freelancer",fields: [freelancerId], references: [id])
  freelancerId Int
  
  client Users @relation("Client",fields: [clientId], references: [id])
  clientId Int

  status ContratcStatus @default(active)
  projectDuration String
  projectBudget Decimal @db.Decimal(10, 2)
  projectDescription String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  startDate       DateTime 
  endDate         DateTime?
}

model Chat {
  id Int @default(autoincrement()) @id
  client Users @relation("ClientsChat", fields: [clientId], references: [id])
  clientId Int
  freelancer Users @relation("FreelancerChat", fields: [freelancerId], references: [id])
  freelancerId Int
  messages Messages[]

  @@index([clientId])
  @@index([freelancerId])
  @@unique([clientId, freelancerId])
}

model Messages {
  id Int @default(autoincrement()) @id
  chat Chat @relation(fields: [chatId], references: [id])
  chatId Int
  sender Users @relation(fields: [senderId], references: [id])
  senderId Int
  content String @db.VarChar(1000)
  createdAt DateTime @default(now())
  @@index([chatId])
  @@index([createdAt])
}


enum ContratcStatus {
  active
  completed
  terminated
}

enum ProjectStatus {
  open
  in_progress
  completed
  closed
}

enum UserType {
  client
  freelancer
}

enum ProposalStatus {
  pending 
  accepted 
  rejected 
}

enum BidStatus {
  pending
  accepted
  rejected
}